let restockData = [];
let currentAutoOrderId = null;

async function generateRestockPredictions() {
    const loadingModal = document.getElementById('loadingModal');
    const generateBtn = document.getElementById('generateRestockBtn');
    const downloadBtn = document.getElementById('downloadRestockBtn');
    const tableContainer = document.getElementById('restockTableContainer');
    
    try {
        // Show loading
        loadingModal.style.display = 'flex';
        generateBtn.disabled = true;
        
        // Call the prediction API
        const response = await fetch('/api/predict_restocks');
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        restockData = data;
        
        // Save to auto_generated_order_list table
        await saveAutoGeneratedOrder();
        
        // Display the results
        displayRestockTable(restockData);
        
        // Show table and download button
        tableContainer.style.display = 'block';
        downloadBtn.style.display = 'inline-flex';
        
        showNotification('Restock predictions generated successfully!', 'success');
        
    } catch (error) {
        console.error('Error generating predictions:', error);
        showNotification('Error generating predictions: ' + error.message, 'error');
    } finally {
        loadingModal.style.display = 'none';
        generateBtn.disabled = false;
    }
}

async function saveAutoGeneratedOrder() {
    try {
        const totalItems = restockData.length;
        const estimatedCost = restockData.reduce((sum, item) => {
            // Estimate cost as recommended_quantity * average_price (assuming 50 PKR average)
            return sum + (item.recommended_quantity * 50);
        }, 0);
        
        // Save main order
        const orderResponse = await fetch('/api/save_auto_order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                total_items: totalItems,
                estimated_cost: estimatedCost
            })
        });
        
        const orderResult = await orderResponse.json();
        if (orderResult.success) {
            currentAutoOrderId = orderResult.auto_order_id;
            
            // Save order items
            for (const item of restockData) {
                await fetch('/api/save_auto_order_item', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        auto_order_id: currentAutoOrderId,
                        product_id: item.product_id,
                        quantity_to_order: item.recommended_quantity
                    })
                });
            }
        }
        
    } catch (error) {
        console.error('Error saving auto order:', error);
    }
}

function displayRestockTable(data) {
    const tbody = document.getElementById('restockTableBody');
    tbody.innerHTML = '';
    
    data.forEach(item => {
        const row = document.createElement('tr');
        
        // Determine status based on days until restock
        let statusClass = 'status-normal';
        let statusText = 'Normal';
        
        if (item.predicted_days_until_restock <= 7) {
            statusClass = 'status-urgent';
            statusText = 'Urgent';
        } else if (item.predicted_days_until_restock <= 30) {
            statusClass = 'status-warning';
            statusText = 'Warning';
        }
        
        row.innerHTML = `
            <td style="padding: 12px; border: 1px solid #ddd; font-weight: 600;">${item.product_name}</td>
            <td style="padding: 12px; border: 1px solid #ddd; text-align: center;">${item.stock_quantity} units</td>
            <td style="padding: 12px; border: 1px solid #ddd;">${new Date(item.restock_date).toLocaleDateString()}</td>
            <td style="padding: 12px; border: 1px solid #ddd; text-align: center; font-weight: 600; color: var(--primary-color);">${item.recommended_quantity} units</td>
            <td style="padding: 12px; border: 1px solid #ddd; text-align: center;">${item.predicted_days_until_restock} days</td>
            <td style="padding: 12px; border: 1px solid #ddd; text-align: center;">
                <span class="${statusClass}">${statusText}</span>
            </td>
        `;
        
        tbody.appendChild(row);
    });
}

async function downloadRestockReport() {
    if (!currentAutoOrderId) {
        showNotification('No restock data available to download', 'error');
        return;
    }
    
    try {
        const response = await fetch(`/api/download_restock_report/${currentAutoOrderId}`);
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `restock_report_${currentAutoOrderId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            showNotification('Report downloaded successfully!', 'success');
        } else {
            throw new Error('Failed to download report');
        }
    } catch (error) {
        console.error('Error downloading report:', error);
        showNotification('Error downloading report', 'error');
    }
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${type === 'error' ? '#E74C3C' : type === 'success' ? '#27AE60' : '#3498DB'};
        color: white;
        border-radius: 8px;
        z-index: 9999;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        font-weight: 500;
        max-width: 300px;
        animation: slideIn 0.3s ease;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i>
            ${message}
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// Add CSS animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);